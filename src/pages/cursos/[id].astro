---
import Layout from '@/layouts/Layout.astro';
import Navbar from '@/components/Navbar.astro';

// Ruta din√°mica servida v√≠a SSR (adapter cloudflare). No prerender.
export const prerender = false;
---

<Layout title="Curso - TecnoJuy">
  <Navbar />
  <main class="course-detail-page">
    <div id="course-container" class="container mx-auto px-4 py-8">
      
      <!-- Loading -->
      <div id="loading" class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span class="ml-3 text-gray-600 dark:text-gray-400">Cargando curso...</span>
      </div>
      
      <!-- Error -->
      <div id="error" class="hidden bg-red-50 dark:bg-red-900/50 border border-red-200 dark:border-red-700 rounded-lg p-6 text-center">
        <div class="text-red-600 dark:text-red-400 mb-2">‚ùå Error al cargar el curso</div>
        <p class="text-sm text-red-500 dark:text-red-300">El curso no existe o no est√° disponible</p>
        <a href="/cursos" class="inline-block mt-3 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
          Volver a cursos
        </a>
      </div>

      <!-- Access Denied -->
      <div id="access-denied" class="hidden bg-orange-50 dark:bg-orange-900/50 border border-orange-200 dark:border-orange-700 rounded-lg p-6 text-center">
        <div class="text-orange-600 dark:text-orange-400 mb-2">üîí Acceso Requerido</div>
        <p class="text-sm text-orange-500 dark:text-orange-300 mb-4">Este curso requiere acceso premium o inscripci√≥n</p>
        <div class="flex gap-3 justify-center">
          <a href="/login" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Iniciar Sesi√≥n
          </a>
          <a href="/cursos" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
            Ver Otros Cursos
          </a>
        </div>
      </div>
      
      <!-- Course Content -->
      <div id="course-content" class="hidden">
        <!-- Course Header -->
        <div id="course-header" class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
          <!-- Se llenar√° din√°micamente -->
        </div>
        
        <!-- Course Progress Bar (for logged in users) -->
        <div id="course-progress" class="hidden bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Tu Progreso</h3>
            <span id="progress-text" class="text-sm text-gray-600 dark:text-gray-400">0% completado</span>
          </div>
          <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-3">
            <div id="progress-bar" class="bg-blue-600 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
        
        <!-- Course Navigation -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Course Structure (Left/Main) -->
          <div class="lg:col-span-2">
            <div id="course-structure" class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Contenido del curso</h2>
              <div id="chapters-list">
                <!-- Se llenar√° din√°micamente -->
              </div>
            </div>
          </div>
          
          <!-- Course Sidebar -->
          <div class="lg:col-span-1">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 sticky top-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Acciones R√°pidas</h3>
              
              <div class="space-y-3">
                <button id="continue-course-btn" class="hidden w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                  üéØ Continuar Curso
                </button>
                
                <button id="start-course-btn" class="hidden w-full bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
                  üöÄ Comenzar Curso
                </button>
                
                <a href="/mis-cursos" class="block w-full bg-gray-600 text-white px-4 py-3 rounded-lg hover:bg-gray-700 transition-colors font-medium text-center">
                  üìö Mis Cursos
                </a>
                
                <a href="/cursos" class="block w-full bg-gray-100 text-gray-700 px-4 py-3 rounded-lg hover:bg-gray-200 transition-colors font-medium text-center">
                  üîç Explorar M√°s Cursos
                </a>
              </div>
              
              <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-600">
                <h4 class="text-sm font-semibold text-gray-900 dark:text-white mb-3">Informaci√≥n del Curso</h4>
                <div id="course-info" class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                  <!-- Se llenar√° din√°micamente -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Modal para visualizar lecci√≥n -->
    <div id="lesson-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-2 sm:p-4">
      <div class="bg-white dark:bg-gray-800 rounded-lg max-w-6xl w-full max-h-[98vh] sm:max-h-[95vh] overflow-hidden">
        <div class="flex justify-between items-center p-3 sm:p-4 border-b dark:border-gray-600 bg-gray-50 dark:bg-gray-700">
          <div class="flex-1 min-w-0 pr-2">
            <h3 id="lesson-modal-title" class="text-sm sm:text-lg font-semibold text-gray-900 dark:text-white truncate">Lecci√≥n</h3>
            <p id="lesson-modal-subtitle" class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 truncate"></p>
          </div>
          <button id="close-lesson-modal" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 text-2xl font-bold p-1 sm:p-2 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-full transition-colors flex-shrink-0">
            √ó
          </button>
        </div>
        <div class="flex flex-col h-full" style="max-height: calc(98vh - 80px);">
          <!-- Video/Content Area -->
          <div id="lesson-video-container" class="bg-black flex-1 flex items-center justify-center min-h-[250px] sm:min-h-[400px] relative overflow-hidden pointer-events-none">
            <div id="lesson-loading" class="text-white">
              <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
              <p class="text-sm sm:text-base">Cargando contenido...</p>
            </div>
            <video id="lesson-video" class="hidden w-full h-auto max-h-[60vh] sm:max-h-[70vh] object-contain pointer-events-auto" controls>
              Tu navegador no soporta el elemento de video.
            </video>
            <div id="lesson-text-content" class="hidden text-white p-3 sm:p-4 md:p-6 overflow-auto max-h-[60vh] sm:max-h-[70vh]">
              <!-- Contenido de texto -->
            </div>
          </div>
          
          <!-- Lesson Controls -->
          <div class="bg-gray-50 dark:bg-gray-700 p-2 sm:p-4 border-t dark:border-gray-600 relative z-10 lesson-controls">
            <!-- Desktop Controls -->
            <div class="hidden sm:flex justify-between items-center">
              <button id="prev-lesson-btn" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50">
                ‚Üê Anterior
              </button>
              
              <div class="flex gap-2">
                <button id="mark-complete-btn" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                  ‚úì Marcar Completa
                </button>
                <button id="download-btn" class="hidden bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                  üì• Descargar
                </button>
              </div>
              
              <button id="next-lesson-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50">
                Siguiente ‚Üí
              </button>
            </div>
            
            <!-- Mobile Controls -->
            <div class="sm:hidden space-y-2">
              <div class="flex gap-2">
                <button id="prev-lesson-btn" class="flex-1 bg-gray-600 text-white px-3 py-2 rounded text-xs hover:bg-gray-700 transition-colors disabled:opacity-50">
                  ‚Üê Anterior
                </button>
                <button id="next-lesson-btn" class="flex-1 bg-blue-600 text-white px-3 py-2 rounded text-xs hover:bg-blue-700 transition-colors disabled:opacity-50">
                  Siguiente ‚Üí
                </button>
              </div>
              <div class="flex gap-2">
                <button id="mark-complete-btn" class="flex-1 bg-green-600 text-white px-3 py-2 rounded text-xs hover:bg-green-700 transition-colors">
                  ‚úì Completa
                </button>
                <button id="download-btn" class="hidden flex-1 bg-blue-600 text-white px-3 py-2 rounded text-xs hover:bg-blue-700 transition-colors">
                  üì• Descargar
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { api } from '@/lib/api';

  interface Course {
    id: number;
    title: string;
    description?: string;
    short_description?: string;
    cover_image_url?: string;
    trailer_video_url?: string;  // Video de presentaci√≥n
    level?: string;
    language?: string;
    category?: string;
    estimated_duration_hours?: number;
  }

  interface Lesson {
    id: number;
    title: string;
    description?: string;
    content_type: string;
    estimated_duration_minutes?: number;
    is_free: boolean;
    can_download: boolean;
    order_index: number;
    video_duration_seconds?: number;
    file_type?: string;
    file_size_bytes?: number;
  }

  interface Chapter {
    id: number;
    title: string;
    description?: string;
    order_index: number;
    lessons: Lesson[];
  }

  interface CourseStructure {
    course: Course;
    chapters: Chapter[];
  }

  const loadingEl = document.getElementById('loading')!;
  const errorEl = document.getElementById('error')!;
  const accessDeniedEl = document.getElementById('access-denied')!;
  const courseContentEl = document.getElementById('course-content')!;
  const courseHeaderEl = document.getElementById('course-header')!;
  const courseProgressEl = document.getElementById('course-progress')!;
  const progressBarEl = document.getElementById('progress-bar')!;
  const progressTextEl = document.getElementById('progress-text')!;
  const chaptersListEl = document.getElementById('chapters-list')!;
  const courseInfoEl = document.getElementById('course-info')!;
  
  // Lesson modal elements
  const lessonModal = document.getElementById('lesson-modal')!;
  const lessonModalTitle = document.getElementById('lesson-modal-title')!;
  const lessonModalSubtitle = document.getElementById('lesson-modal-subtitle')!;
  const lessonVideoContainer = document.getElementById('lesson-video-container')!;
  const lessonLoading = document.getElementById('lesson-loading')!;
  const lessonVideo = document.getElementById('lesson-video')! as HTMLVideoElement;
  const lessonTextContent = document.getElementById('lesson-text-content')!;
  const closeLessonModal = document.getElementById('close-lesson-modal')!;
  
  // Action buttons
  const continueBtn = document.getElementById('continue-course-btn')!;
  const startBtn = document.getElementById('start-course-btn')!;
  const prevLessonBtn = document.getElementById('prev-lesson-btn')!;
  const nextLessonBtn = document.getElementById('next-lesson-btn')!;
  const markCompleteBtn = document.getElementById('mark-complete-btn')!;
  const downloadBtn = document.getElementById('download-btn')!;

  let currentCourse: CourseStructure | null = null;
  let currentUser: any = null;
  let currentChapterIndex = -1;
  let currentLessonIndex = -1;
  let currentLessonId = -1;
  let allLessons: (Lesson & { chapterTitle: string })[] = [];

  // Obtener ID del curso de la URL
  const courseId = parseInt(window.location.pathname.split('/').pop() || '0');

  function formatDuration(minutes?: number): string {
    if (!minutes) return '';
    if (minutes < 60) return `${minutes} min`;
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}h ${mins}min`;
  }

  function formatFileSize(bytes?: number): string {
    if (!bytes) return '';
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
  }

  function getContentTypeIcon(contentType: string): string {
    switch (contentType) {
      case 'video': return 'üé•';
      case 'pdf': return 'üìÑ';
      case 'image': return 'üñºÔ∏è';
      case 'text': return 'üìù';
      case 'quiz': return '‚ùì';
      default: return 'üìÑ';
    }
  }

  function createCourseHeader(course: Course): string {
    return `
      <div class="flex flex-col gap-6">
        <!-- Trailer Video (si existe) -->
        ${course.trailer_video_url ? `
          <div class="w-full">
            <div class="aspect-video bg-black rounded-lg overflow-hidden">
              <video 
                class="w-full h-full object-contain"
                controls
                autoplay
                muted
                playsinline
                preload="metadata"
                poster="${course.cover_image_url || ''}"
              >
                <source src="${course.trailer_video_url}" type="video/mp4">
                Tu navegador no soporta la reproducci√≥n de videos.
              </video>
            </div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2 text-center">
              üé¨ Video de presentaci√≥n del curso
            </p>
          </div>
        ` : ''}
        
        <!-- Course Info -->
        <div class="flex flex-col lg:flex-row gap-6">
          ${!course.trailer_video_url ? `
            <!-- Cover Image (solo si NO hay trailer) -->
            <div class="lg:w-1/3">
              <div class="aspect-video bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg overflow-hidden">
                ${course.cover_image_url 
                  ? `<img src="${course.cover_image_url}" alt="${course.title}" class="w-full h-full object-cover">`
                  : `<div class="flex items-center justify-center h-full text-white text-6xl">üìö</div>`
                }
              </div>
            </div>
          ` : ''}
          
          <div class="${course.trailer_video_url ? 'w-full' : 'lg:w-2/3'}">
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-4">${course.title}</h1>
            
            ${course.short_description ? `
              <p class="text-base sm:text-lg text-gray-600 dark:text-gray-400 mb-4">${course.short_description}</p>
            ` : ''}
            
            ${course.description ? `
              <div class="prose max-w-none mb-6">
                <p class="text-sm sm:text-base text-gray-700 dark:text-gray-300">${course.description}</p>
              </div>
            ` : ''}
            
            <div class="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 text-sm">
              ${course.level ? `
                <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div class="text-gray-500 dark:text-gray-400 mb-1 text-xs sm:text-sm">Nivel</div>
                  <div class="font-medium dark:text-white text-sm sm:text-base">${course.level}</div>
                </div>
              ` : ''}
              
              ${course.language ? `
                <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div class="text-gray-500 dark:text-gray-400 mb-1 text-xs sm:text-sm">Idioma</div>
                  <div class="font-medium dark:text-white text-sm sm:text-base">${course.language}</div>
                </div>
              ` : ''}
              
              ${course.category ? `
                <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div class="text-gray-500 dark:text-gray-400 mb-1 text-xs sm:text-sm">Categor√≠a</div>
                  <div class="font-medium dark:text-white text-sm sm:text-base">${course.category}</div>
                </div>
              ` : ''}
              
              ${course.estimated_duration_hours ? `
                <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div class="text-gray-500 dark:text-gray-400 mb-1 text-xs sm:text-sm">Duraci√≥n</div>
                  <div class="font-medium dark:text-white text-sm sm:text-base">${course.estimated_duration_hours}h</div>
                </div>
              ` : ''}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  function createChaptersList(chapters: Chapter[]): string {
    return chapters.map((chapter, chapterIndex) => `
      <div class="border border-gray-200 dark:border-gray-600 rounded-lg mb-4">
        <div class="bg-gray-50 dark:bg-gray-700 px-4 sm:px-6 py-3 sm:py-4 border-b border-gray-200 dark:border-gray-600">
          <h3 class="text-base sm:text-lg font-semibold text-gray-900 dark:text-white">${chapter.title}</h3>
          ${chapter.description ? `<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">${chapter.description}</p>` : ''}
        </div>
        
        <div class="divide-y divide-gray-200 dark:divide-gray-600">
          ${chapter.lessons.map((lesson, lessonIndex) => `
            <div class="px-3 sm:px-6 py-3 sm:py-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
              <!-- Layout Desktop -->
              <div class="hidden sm:flex items-center justify-between">
                <div class="flex items-center gap-3 flex-1">
                  <span class="text-xl sm:text-2xl flex-shrink-0">${getContentTypeIcon(lesson.content_type)}</span>
                  
                  <div class="flex-1 min-w-0">
                    <h4 class="font-medium text-gray-900 dark:text-white truncate">${lesson.title}</h4>
                    ${lesson.description ? `<p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">${lesson.description}</p>` : ''}
                    
                    <div class="flex items-center gap-3 sm:gap-4 mt-2 text-xs text-gray-500 dark:text-gray-400 flex-wrap">
                      ${lesson.estimated_duration_minutes ? `
                        <span class="flex items-center gap-1">‚è±Ô∏è ${formatDuration(lesson.estimated_duration_minutes)}</span>
                      ` : ''}
                      
                      ${lesson.file_type ? `
                        <span class="flex items-center gap-1">üìé ${lesson.file_type.toUpperCase()}</span>
                      ` : ''}
                      
                      ${lesson.file_size_bytes ? `
                        <span class="flex items-center gap-1">üíæ ${formatFileSize(lesson.file_size_bytes)}</span>
                      ` : ''}
                    </div>
                  </div>
                </div>
                
                <div class="flex items-center gap-2 ml-4 flex-shrink-0">
                  ${lesson.is_free 
                    ? '<span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded whitespace-nowrap">Gratis</span>'
                    : '<span class="bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded whitespace-nowrap">Premium</span>'
                  }
                  
                  <button 
                    onclick="openLessonByIndex(${chapterIndex}, ${lessonIndex})"
                    class="bg-blue-600 text-white px-3 py-1.5 rounded text-sm hover:bg-blue-700 transition-colors whitespace-nowrap"
                  >
                    Ver lecci√≥n
                  </button>
                </div>
              </div>
              
              <!-- Layout Mobile -->
              <div class="sm:hidden">
                <div class="flex items-start gap-2 mb-3">
                  <span class="text-xl flex-shrink-0">${getContentTypeIcon(lesson.content_type)}</span>
                  
                  <div class="flex-1 min-w-0">
                    <h4 class="font-medium text-sm text-gray-900 dark:text-white mb-1">${lesson.title}</h4>
                    ${lesson.description ? `<p class="text-xs text-gray-600 dark:text-gray-400 line-clamp-2">${lesson.description}</p>` : ''}
                  </div>
                  
                  ${lesson.is_free 
                    ? '<span class="bg-green-100 text-green-800 text-xs px-2 py-0.5 rounded flex-shrink-0">Gratis</span>'
                    : '<span class="bg-orange-100 text-orange-800 text-xs px-2 py-0.5 rounded flex-shrink-0">Premium</span>'
                  }
                </div>
                
                <div class="flex items-center justify-between gap-2">
                  <div class="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400 flex-wrap flex-1">
                    ${lesson.estimated_duration_minutes ? `
                      <span class="flex items-center gap-1 whitespace-nowrap">‚è±Ô∏è ${formatDuration(lesson.estimated_duration_minutes)}</span>
                    ` : ''}
                    
                    ${lesson.file_type ? `
                      <span class="flex items-center gap-1 whitespace-nowrap">üìé ${lesson.file_type.toUpperCase()}</span>
                    ` : ''}
                    
                    ${lesson.file_size_bytes ? `
                      <span class="flex items-center gap-1 whitespace-nowrap">üíæ ${formatFileSize(lesson.file_size_bytes)}</span>
                    ` : ''}
                  </div>
                  
                  <button 
                    onclick="openLessonByIndex(${chapterIndex}, ${lessonIndex})"
                    class="bg-blue-600 text-white px-3 py-1.5 rounded text-xs hover:bg-blue-700 transition-colors whitespace-nowrap flex-shrink-0"
                  >
                    Ver lecci√≥n
                  </button>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `).join('');
  }

  async function openLesson(lessonId: number, lessonTitle: string, isFree: boolean) {
    try {
      // Configurar modal
      lessonModalTitle.textContent = lessonTitle;
      lessonModalSubtitle.textContent = '';
      
      // Mostrar loading
      lessonLoading.classList.remove('hidden');
      lessonVideo.classList.add('hidden');
      lessonTextContent.classList.add('hidden');
      downloadBtn.classList.add('hidden');
      
      lessonModal.classList.remove('hidden');

      const lessonContent = await api.getLessonContent(lessonId);
      
      // Ocultar loading
      lessonLoading.classList.add('hidden');
      
      // Mostrar subtitle con descripci√≥n
      if (lessonContent.description) {
        lessonModalSubtitle.textContent = lessonContent.description;
      }

      // Manejar diferentes tipos de contenido
      if (lessonContent.content_type === 'video' && lessonContent.video_url) {
        lessonVideo.src = lessonContent.video_url;
        lessonVideo.classList.remove('hidden');
        
        // Configurar poster si hay imagen de portada
        if (lessonContent.thumbnail_url) {
          lessonVideo.poster = lessonContent.thumbnail_url;
        }
        
      } else if (lessonContent.content_type === 'image' && lessonContent.file_url) {
        lessonTextContent.innerHTML = `
          <div class="flex justify-center">
            <img 
              src="${lessonContent.file_url}" 
              alt="${lessonContent.title}"
              class="max-w-full max-h-[66vh] object-contain rounded-lg shadow-md"
            >
          </div>
        `;
        lessonTextContent.classList.remove('hidden');
        
      } else if (lessonContent.content_type === 'pdf' && lessonContent.file_url) {
        lessonTextContent.innerHTML = `
          <div class="w-full flex flex-col">
            <div class="mb-3 text-center">
              <p class="text-white mb-3">üìÑ Documento PDF: ${lessonContent.title}</p>
              <a 
                href="${lessonContent.file_url}" 
                target="_blank"
                class="inline-flex items-center bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                üîó Abrir PDF en nueva ventana
              </a>
            </div>
            <div class="pdf-viewer-container bg-white rounded shadow overflow-hidden h-[66vh] pointer-events-auto">
              <iframe 
                src="${lessonContent.file_url}" 
                class="w-full h-full border-0"
                title="PDF Viewer"
              ></iframe>
            </div>
          </div>
        `;
        lessonTextContent.classList.remove('hidden');
        
      } else if (lessonContent.text_content) {
        lessonTextContent.innerHTML = `
          <div class="prose prose-invert max-w-none p-8">
            <h3 class="text-white text-xl font-bold mb-4">${lessonContent.title}</h3>
            <div class="text-gray-200 whitespace-pre-wrap leading-relaxed">
              ${lessonContent.text_content}
            </div>
          </div>
        `;
        lessonTextContent.classList.remove('hidden');
        
      } else {
        // Contenido no disponible
        lessonTextContent.innerHTML = `
          <div class="flex items-center justify-center h-full text-center">
            <div>
              <div class="text-6xl mb-4">üìÑ</div>
              <h3 class="text-xl font-bold text-white mb-2">${lessonContent.title}</h3>
              <p class="text-gray-300">Contenido no disponible para visualizaci√≥n</p>
            </div>
          </div>
        `;
        lessonTextContent.classList.remove('hidden');
      }

      // Mostrar bot√≥n de descarga si est√° disponible
      if (lessonContent.can_download && lessonContent.file_url) {
        downloadBtn.classList.remove('hidden');
        downloadBtn.onclick = () => {
          window.open(lessonContent.file_url, '_blank');
        };
      }

      // Actualizar estado del bot√≥n "Marcar como completa"
      if (lessonContent.is_completed) {
        markCompleteBtn.innerHTML = '‚úÖ Completada';
        markCompleteBtn.disabled = true;
        markCompleteBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
        markCompleteBtn.classList.add('bg-gray-600');
      } else {
        markCompleteBtn.innerHTML = '‚úì Marcar Completa';
        markCompleteBtn.disabled = false;
        markCompleteBtn.classList.remove('bg-gray-600');
        markCompleteBtn.classList.add('bg-green-600', 'hover:bg-green-700');
      }

    } catch (error) {
      console.error('‚ùå Error cargando lecci√≥n:', error);
      lessonLoading.classList.add('hidden');
      
      lessonTextContent.innerHTML = `
        <div class="flex items-center justify-center h-full text-center">
          <div>
            <div class="text-red-400 text-6xl mb-4">‚ùå</div>
            <h3 class="text-xl font-bold text-white mb-2">Error al cargar la lecci√≥n</h3>
            <p class="text-gray-300 mb-4">
              ${error instanceof Error && error.message.includes('403') 
                ? 'No tienes acceso a esta lecci√≥n. Contacta al administrador.' 
                : 'Error de conexi√≥n. Intenta nuevamente.'
              }
            </p>
            <button 
              onclick="openLesson(${lessonId}, '${lessonTitle}', ${isFree})"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              üîÑ Intentar de nuevo
            </button>
          </div>
        </div>
      `;
      lessonTextContent.classList.remove('hidden');
    }
  }

  function updateCourseInfo(course: Course) {
    const info = [
      course.level ? `<div class="flex justify-between"><span>Nivel:</span><span>${course.level}</span></div>` : '',
      course.language ? `<div class="flex justify-between"><span>Idioma:</span><span>${course.language}</span></div>` : '',
      course.category ? `<div class="flex justify-between"><span>Categor√≠a:</span><span>${course.category}</span></div>` : '',
      course.estimated_duration_hours ? `<div class="flex justify-between"><span>Duraci√≥n:</span><span>${course.estimated_duration_hours}h</span></div>` : ''
    ].filter(Boolean).join('');
    
    courseInfoEl.innerHTML = info;
  }

  // Funci√≥n para abrir lecci√≥n por √≠ndice
  async function openLessonByIndex(chapterIndex: number, lessonIndex: number) {
    if (!currentCourse || !currentCourse.chapters[chapterIndex] || !currentCourse.chapters[chapterIndex].lessons[lessonIndex]) {
      console.error('‚ùå Lecci√≥n no encontrada:', chapterIndex, lessonIndex);
      return;
    }

    const lesson = currentCourse.chapters[chapterIndex].lessons[lessonIndex];
    currentChapterIndex = chapterIndex;
    currentLessonIndex = lessonIndex;
    currentLessonId = lesson.id;

    await openLesson(lesson.id, lesson.title, lesson.is_free);
    updateNavigationButtons();
  }

  // Funci√≥n para navegar a la lecci√≥n anterior
  function goToPreviousLesson() {
    if (!currentCourse) return;

    let prevChapterIndex = currentChapterIndex;
    let prevLessonIndex = currentLessonIndex - 1;

    // Si estamos en la primera lecci√≥n del cap√≠tulo, ir al cap√≠tulo anterior
    if (prevLessonIndex < 0) {
      prevChapterIndex--;
      if (prevChapterIndex >= 0) {
        prevLessonIndex = currentCourse.chapters[prevChapterIndex].lessons.length - 1;
      }
    }

    // Verificar que existe la lecci√≥n anterior
    if (prevChapterIndex >= 0 && prevLessonIndex >= 0) {
      openLessonByIndex(prevChapterIndex, prevLessonIndex);
    }
  }

  // Funci√≥n para navegar a la lecci√≥n siguiente
  function goToNextLesson() {
    if (!currentCourse) return;

    let nextChapterIndex = currentChapterIndex;
    let nextLessonIndex = currentLessonIndex + 1;

    // Si estamos en la √∫ltima lecci√≥n del cap√≠tulo, ir al siguiente cap√≠tulo
    if (nextLessonIndex >= currentCourse.chapters[nextChapterIndex].lessons.length) {
      nextChapterIndex++;
      nextLessonIndex = 0;
    }

    // Verificar que existe la lecci√≥n siguiente
    if (nextChapterIndex < currentCourse.chapters.length && 
        nextLessonIndex < currentCourse.chapters[nextChapterIndex].lessons.length) {
      openLessonByIndex(nextChapterIndex, nextLessonIndex);
    }
  }

  // Funci√≥n para actualizar botones de navegaci√≥n
  function updateNavigationButtons() {
    if (!currentCourse) return;

    // Verificar si hay lecci√≥n anterior
    let hasPrevious = false;
    if (currentLessonIndex > 0) {
      hasPrevious = true;
    } else if (currentChapterIndex > 0) {
      hasPrevious = true;
    }

    // Verificar si hay lecci√≥n siguiente
    let hasNext = false;
    if (currentLessonIndex < currentCourse.chapters[currentChapterIndex].lessons.length - 1) {
      hasNext = true;
    } else if (currentChapterIndex < currentCourse.chapters.length - 1) {
      hasNext = true;
    }

    prevLessonBtn.disabled = !hasPrevious;
    nextLessonBtn.disabled = !hasNext;
  }

  // Funci√≥n para marcar lecci√≥n como completa
  async function markLessonComplete() {
    if (currentLessonId === -1) return;

    try {
      markCompleteBtn.disabled = true;
      markCompleteBtn.innerHTML = '‚è≥ Marcando...';
      
      // Marcar lecci√≥n como completa en el backend
      await api.markLessonComplete(currentLessonId);
      
      // Actualizar progreso del curso
      await updateCourseProgress();
      
      markCompleteBtn.innerHTML = '‚úÖ Completada';
      markCompleteBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
      markCompleteBtn.classList.add('bg-gray-600');
      
      // Opcional: avanzar autom√°ticamente a la siguiente lecci√≥n despu√©s de 2 segundos
      setTimeout(() => {
        goToNextLesson();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Error marcando lecci√≥n como completa:', error);
      markCompleteBtn.disabled = false;
      markCompleteBtn.innerHTML = '‚úì Marcar Completa';
      alert('Error al marcar la lecci√≥n como completa');
    }
  }

  // Funci√≥n para actualizar el progreso del curso
  async function updateCourseProgress() {
    try {
      const progress = await api.getCourseProgress(courseId);
      
      // Actualizar barra de progreso
      const percentage = Math.round(progress.progress_percentage);
      progressBarEl.style.width = `${percentage}%`;
      progressTextEl.textContent = `${percentage}% completado (${progress.completed_lessons} de ${progress.total_lessons} lecciones)`;
      
      console.log('üìä Progreso actualizado:', progress);
      
    } catch (error) {
      console.error('‚ùå Error actualizando progreso:', error);
    }
  }

  async function loadCourseStructure() {
    try {
      console.log('üîÑ Cargando estructura del curso:', courseId);
      
      // Intentar cargar con acceso primero (para usuarios logueados)
      let data: CourseStructure;
      try {
        data = await api.getCourseStructureWithAccess(courseId);
        console.log('üìö Estructura con acceso recibida:', data);
        
        // Verificar si tiene acceso al curso
        if (data.course.has_access) {
          courseProgressEl.classList.remove('hidden');
          startBtn.classList.add('hidden');
          continueBtn.classList.remove('hidden');
        } else {
          // No tiene acceso, mostrar mensaje
          if (data.course.is_premium) {
            accessDeniedEl.classList.remove('hidden');
            loadingEl.classList.add('hidden');
            return;
          }
        }
        
      } catch (error) {
        // Si falla (usuario no logueado), usar endpoint p√∫blico
        console.log('üë§ Usuario no logueado, usando vista p√∫blica');
        data = await api.getCourseStructurePublic(courseId);
        console.log('üìö Estructura p√∫blica recibida:', data);
      }
      
      loadingEl.classList.add('hidden');
      
      // Guardar referencia del curso para navegaci√≥n
      currentCourse = data;
      
      courseHeaderEl.innerHTML = createCourseHeader(data.course);
      chaptersListEl.innerHTML = createChaptersList(data.chapters);
      
      // Actualizar info del curso en sidebar
      updateCourseInfo(data.course);
      
      // Cargar progreso inicial si el usuario tiene acceso
      if (data.course.has_access) {
        await updateCourseProgress();
      }
      
      courseContentEl.classList.remove('hidden');
      
      // Actualizar t√≠tulo de la p√°gina
      document.title = `${data.course.title} - TecnoJuy`;
      
    } catch (error) {
      console.error('‚ùå Error cargando curso:', error);
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
    }
  }

  // Event listeners
  closeLessonModal.addEventListener('click', () => {
    lessonModal.classList.add('hidden');
  });

  lessonModal.addEventListener('click', (e) => {
    if (e.target === lessonModal) {
      lessonModal.classList.add('hidden');
    }
  });

  // Event listeners para navegaci√≥n de lecciones
  prevLessonBtn.addEventListener('click', goToPreviousLesson);
  nextLessonBtn.addEventListener('click', goToNextLesson);
  markCompleteBtn.addEventListener('click', markLessonComplete);

  // Hacer las funciones globales para que funcionen desde onclick
  (window as any).openLesson = openLesson;
  (window as any).openLessonByIndex = openLessonByIndex;

  // Cargar estructura del curso al inicializar
  if (courseId) {
    loadCourseStructure();
  } else {
    loadingEl.classList.add('hidden');
    errorEl.classList.remove('hidden');
  }
</script>

<style>
  /* Brand dark theme for course detail page */
  :global([data-theme="dark"]) .course-detail-page,
  :global(.dark) .course-detail-page {
    background-color: #00012e !important;
  }

  /* Container takes full height and brand bg in dark */
  :global([data-theme="dark"]) .course-detail-page #course-container,
  :global(.dark) .course-detail-page #course-container {
    background-color: #00012e !important;
    min-height: 100vh;
  }

  /* Unify card/section backgrounds to brand in dark */
  :global([data-theme="dark"]) .course-detail-page #course-header,
  :global(.dark) .course-detail-page #course-header,
  :global([data-theme="dark"]) .course-detail-page #course-progress,
  :global(.dark) .course-detail-page #course-progress,
  :global([data-theme="dark"]) .course-detail-page #course-structure,
  :global(.dark) .course-detail-page #course-structure,
  :global([data-theme="dark"]) .course-detail-page .lg\:col-span-1 > div,
  :global(.dark) .course-detail-page .lg\:col-span-1 > div {
    background-color: #00012e !important;
    border-color: #2a2a4e !important;
  }

  /* Header info tiles background (Nivel, Idioma, etc.) */
  :global([data-theme="dark"]) .course-detail-page #course-header .p-3.rounded-lg,
  :global(.dark) .course-detail-page #course-header .p-3.rounded-lg {
    background-color: #0a0a2e !important;
    border: 1px solid #2a2a4e !important;
  }

  /* Improve readability: make secondary/muted text white on this page in dark */
  :global([data-theme="dark"]) .course-detail-page,
  :global(.dark) .course-detail-page {
    --text-secondary: #ffffff;
    --text-muted: #ffffff;
    --text-inverse: #ffffff;
  }

  /* Chapters list: borders and hover background */
  :global([data-theme="dark"]) .course-detail-page .divide-y > :not([hidden]) ~ :not([hidden]),
  :global(.dark) .course-detail-page .divide-y > :not([hidden]) ~ :not([hidden]) {
    border-color: #2a2a4e !important;
  }

  :global([data-theme="dark"]) .course-detail-page .border,
  :global(.dark) .course-detail-page .border {
    border-color: #2a2a4e !important;
  }

  :global([data-theme="dark"]) .course-detail-page .px-6.py-4:hover,
  :global(.dark) .course-detail-page .px-6.py-4:hover {
    background-color: #0a0a2e !important;
  }

  /* Loading text to white */
  :global([data-theme="dark"]) .course-detail-page #loading span,
  :global(.dark) .course-detail-page #loading span {
    color: #ffffff !important;
  }

  /* Lesson modal brand styling */
  :global([data-theme="dark"]) .course-detail-page #lesson-modal > div,
  :global(.dark) .course-detail-page #lesson-modal > div {
    background-color: #0a0a2e !important;
    border: 1px solid #2a2a4e !important;
  }

  :global([data-theme="dark"]) .course-detail-page #lesson-modal .border-b,
  :global(.dark) .course-detail-page #lesson-modal .border-b {
    border-color: #2a2a4e !important;
    background-color: #00012e !important;
  }

  :global([data-theme="dark"]) .course-detail-page #lesson-modal .border-t,
  :global(.dark) .course-detail-page #lesson-modal .border-t {
    border-color: #2a2a4e !important;
    background-color: #0a0a2e !important;
  }

  /* Text inside modal to white for readability */
  :global([data-theme="dark"]) .course-detail-page #lesson-modal h3,
  :global(.dark) .course-detail-page #lesson-modal h3,
  :global([data-theme="dark"]) .course-detail-page #lesson-modal p,
  :global(.dark) .course-detail-page #lesson-modal p {
    color: #ffffff !important;
  }

  /* Override various Tailwind gray text utilities to white for readability */
  :global([data-theme="dark"]) .course-detail-page .text-gray-300,
  :global(.dark) .course-detail-page .text-gray-300,
  :global([data-theme="dark"]) .course-detail-page .text-gray-400,
  :global(.dark) .course-detail-page .text-gray-400,
  :global([data-theme="dark"]) .course-detail-page .text-gray-500,
  :global(.dark) .course-detail-page .text-gray-500,
  :global([data-theme="dark"]) .course-detail-page .text-gray-600,
  :global(.dark) .course-detail-page .text-gray-600 {
    color: #ffffff !important;
  }

  /* Brand buttons in dark mode */
  :global([data-theme="dark"]) .course-detail-page .bg-blue-600,
  :global(.dark) .course-detail-page .bg-blue-600 {
    background-color: #029dc4 !important; /* brand accent */
  }
  :global([data-theme="dark"]) .course-detail-page .hover\:bg-blue-700:hover,
  :global(.dark) .course-detail-page .hover\:bg-blue-700:hover {
    background-color: #0284a3 !important;
  }
  :global([data-theme="dark"]) .course-detail-page .bg-green-600,
  :global(.dark) .course-detail-page .bg-green-600 {
    background-color: #00cc66 !important; /* brand green */
  }
  :global([data-theme="dark"]) .course-detail-page .hover\:bg-green-700:hover,
  :global(.dark) .course-detail-page .hover\:bg-green-700:hover {
    background-color: #00b359 !important;
  }
  :global([data-theme="dark"]) .course-detail-page .bg-gray-600,
  :global(.dark) .course-detail-page .bg-gray-600 {
    background-color: #2a2a4e !important;
  }
  :global([data-theme="dark"]) .course-detail-page .hover\:bg-gray-700:hover,
  :global(.dark) .course-detail-page .hover\:bg-gray-700:hover {
    background-color: #3a3a6e !important;
  }
  :global([data-theme="dark"]) .course-detail-page .bg-gray-100,
  :global(.dark) .course-detail-page .bg-gray-100 {
    background-color: #0a0a2e !important;
    color: #ffffff !important;
  }
  :global([data-theme="dark"]) .course-detail-page .hover\:bg-gray-200:hover,
  :global(.dark) .course-detail-page .hover\:bg-gray-200:hover {
    background-color: #1a1a3e !important;
  }

  /* Progress bar color to brand accent */
  :global([data-theme="dark"]) .course-detail-page #progress-bar,
  :global(.dark) .course-detail-page #progress-bar {
    background-color: var(--accent) !important;
  }

  /* Ensure media fits and controls stay clickable */
  :global(.course-detail-page #lesson-modal #lesson-video) {
    max-height: 70vh;
    width: 100%;
    object-fit: contain;
  }
  :global(.course-detail-page #lesson-modal #lesson-text-content img) {
    max-height: 66vh;
    width: auto;
    object-fit: contain;
  }
  :global(.course-detail-page #lesson-modal #lesson-video-container) {
    pointer-events: none;
  }
  :global(.course-detail-page #lesson-modal #lesson-text-content) {
    pointer-events: auto;
    z-index: 1;
  }
  :global(.course-detail-page #lesson-modal #lesson-video) {
    pointer-events: auto;
    z-index: 1;
  }
  :global(.course-detail-page #lesson-modal .lesson-controls) {
    position: relative;
    z-index: 2;
  }
</style>
